// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// LoginPageData contains the data needed to render the login page
type LoginPageData struct {
	IsLoggedIn bool
	Username   string
	HasAccess  bool
}

// LoginPage renders the Plex OAuth login page
func LoginPage(data LoginPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html><head><title>Login with Plex</title><style>\n\t\t\t\tbody {\n\t\t\t\t\tfont-family: Arial, sans-serif;\n\t\t\t\t\tmax-width: 600px;\n\t\t\t\t\tmargin: 50px auto;\n\t\t\t\t\tpadding: 20px;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tbackground-color: #1a1a1a;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t}\n\t\t\t\th1 { color: #e5a00d; }\n\t\t\t\tp { color: #ccc; }\n\t\t\t\t.auth-button {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tbackground-color: #e5a00d;\n\t\t\t\t\tcolor: #000;\n\t\t\t\t\tpadding: 15px 40px;\n\t\t\t\t\tborder: none;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\tmargin: 20px 0;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\ttransition: background-color 0.2s;\n\t\t\t\t}\n\t\t\t\t.auth-button:hover {\n\t\t\t\t\tbackground-color: #cc8800;\n\t\t\t\t}\n\t\t\t\t.auth-button:disabled {\n\t\t\t\t\tbackground-color: #666;\n\t\t\t\t\tcursor: not-allowed;\n\t\t\t\t\topacity: 0.6;\n\t\t\t\t}\n\t\t\t\t.loading {\n\t\t\t\t\tmargin-top: 30px;\n\t\t\t\t\tcolor: #999;\n\t\t\t\t}\n\t\t\t\t.spinner {\n\t\t\t\t\tborder: 3px solid #282828;\n\t\t\t\t\tborder-top: 3px solid #e5a00d;\n\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\twidth: 40px;\n\t\t\t\t\theight: 40px;\n\t\t\t\t\tanimation: spin 1s linear infinite;\n\t\t\t\t\tmargin: 20px auto;\n\t\t\t\t}\n\t\t\t\t@keyframes spin {\n\t\t\t\t\t0% { transform: rotate(0deg); }\n\t\t\t\t\t100% { transform: rotate(360deg); }\n\t\t\t\t}\n\t\t\t\t.status {\n                    background-color: #282828;\n                    padding: 20px;\n                    border-radius: 5px;\n                    margin: 20px 0;\n                }\n                .status-ok { color: #4CAF50; }\n                .status-error { color: #f44336; }\n                a {\n                    display: inline-block;\n                    background-color: #e5a00d;\n                    color: #000;\n                    padding: 15px 40px;\n                    border: none;\n                    border-radius: 5px;\n                    font-weight: bold;\n                    font-size: 16px;\n                    margin: 20px 0;\n                    text-decoration: none;\n                    transition: background-color 0.2s;\n                }\n                a.logout {\n                    padding: 10px 30px;\n                    font-size: 14px;\n                    margin: 10px 5px;\n                    background-color: #666;\n                }\n\t\t\t</style></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !data.IsLoggedIn {
			templ_7745c5c3_Err = loginForm(data).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else if !data.HasAccess {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<h1>Access Denied</h1><p style=\"color: #ff4444;\">Your Plex account (")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Username)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/server/views/login.templ`, Line: 100, Col: 77}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, ") does not have access to this server.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = userDetails(data).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = logoutButton().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func loginForm(data LoginPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<h1>Login with Plex</h1><p>Authenticate with your Plex account to access this server.</p><button onclick=\"initiateLogin()\" class=\"auth-button\" id=\"loginButton\">Login with Plex</button><div class=\"loading\" id=\"loading\" style=\"display:none;\"><div class=\"spinner\"></div><p>Waiting for authentication...</p><p style=\"font-size: 14px; margin-top: 10px;\">Complete the authentication in the popup window.</p><p style=\"font-size: 12px; color: #999; margin-top: 10px;\">After approving, the popup will close automatically.</p></div><div id=\"status\" style=\"margin-top: 20px;\"></div><script>\n        let polling = false;\n        let pollInterval;\n        let authPopup;\n        let pinData = null;\n\n        async function initiateLogin() {\n            const button = document.getElementById('loginButton');\n            button.disabled = true;\n\n            try {\n                // Request PIN from server\n                const response = await fetch('/auth/generate-pin', {\n                    method: 'POST'\n                });\n\n                if (!response.ok) {\n                    throw new Error('Failed to generate PIN');\n                }\n\n                pinData = await response.json();\n\n                // Small delay to show the PIN, then open modal\n                setTimeout(() => {\n                    openAuthPopup(pinData.auth_url, pinData.pin_id);\n                }, 1000);\n\n            } catch (error) {\n                console.error('Error initiating login:', error);\n                button.disabled = false;\n                document.getElementById('status').innerHTML =\n                    '<p style=\"color: #ff4444;\">Failed to initiate login. Please try again.</p>';\n            }\n        }\n\n        function openAuthPopup(authURL, pinID) {\n            // Hide button\n            const button = document.getElementById('loginButton');\n            button.style.display = 'none';\n\n            // Open popup window centered on current window\n            const width = 600;\n            const height = 700;\n            const left = window.screenX + (window.outerWidth - width) / 2;\n            const top = window.screenY + (window.outerHeight - height) / 2;\n\n            authPopup = window.open(\n                authURL,\n                'PlexAuth',\n                'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',toolbar=no,menubar=no,scrollbars=yes,resizable=yes'\n            );\n\n            if (!authPopup) {\n                // Popup blocked - show button again\n                button.disabled = false;\n                button.style.display = 'inline-block';\n                document.getElementById('status').innerHTML =\n                    '<p style=\"color: #e5a00d;\">Popup blocked! Please allow popups and try again.</p>' +\n                    '<p style=\"font-size: 14px; margin-top: 10px;\">Or <a href=\"' + authURL + '\" target=\"_blank\" style=\"color: #e5a00d;\">click here</a> to open in a new tab.</p>';\n                return;\n            }\n\n            // Start polling\n            startPolling(pinID);\n\n            // Show loading state\n            document.getElementById('loading').style.display = 'block';\n\n            // Check if popup is closed\n            const popupChecker = setInterval(function() {\n                if (authPopup && authPopup.closed) {\n                    clearInterval(popupChecker);\n                    if (polling) {\n                        // Give it a few more seconds to complete auth before giving up\n                        setTimeout(function() {\n                            if (polling) {\n                                stopPolling();\n                                document.getElementById('loading').style.display = 'none';\n                                document.getElementById('loginButton').style.display = 'inline-block';\n                                document.getElementById('loginButton').disabled = false;\n                                document.getElementById('status').innerHTML =\n                                    '<p style=\"color: #e5a00d;\">Authentication window closed before completing. Please try again.</p>';\n                            }\n                        }, 5000); // Give 5 seconds grace period\n                    }\n                }\n            }, 500);\n        }\n\n        function startPolling(pinID) {\n            if (polling) return;\n            polling = true;\n\n            pollInterval = setInterval(() => checkAuth(pinID), 2000);\n            // Stop polling after 5 minutes\n            setTimeout(function() {\n                stopPolling();\n                document.getElementById('status').innerHTML =\n                    '<p style=\"color: #e5a00d;\">Authentication timeout. <a href=\"#\" onclick=\"initiateLogin(); return false;\" style=\"color: #e5a00d; text-decoration: underline;\">Click here</a> to try again.</p>';\n            }, 5 * 60 * 1000);\n        }\n\n        function stopPolling() {\n            if (pollInterval) {\n                clearInterval(pollInterval);\n                polling = false;\n            }\n        }\n\n        function checkAuth(pinID) {\n            fetch('/callback?pin_id=' + pinID)\n                .then(response => {\n                    if (response.ok) {\n                        stopPolling();\n                        // Close popup if still open\n                        if (authPopup && !authPopup.closed) {\n                            authPopup.close();\n                        }\n\n                        const urlParams = new URLSearchParams(window.location.search);\n                        const redirectUrl = urlParams.get('redirect');\n                        if (redirectUrl) {\n                            window.location.href = redirectUrl;\n                            return;\n                        }\n\n                        // Reload the page to reflect logged-in state\n                        window.location.reload();\n                    } else if (response.status === 403) {\n                        stopPolling();\n                        if (authPopup && !authPopup.closed) {\n                            authPopup.close();\n                        }\n                        document.getElementById('loading').style.display = 'none';\n                        document.getElementById('status').innerHTML =\n                            '<p style=\"color: #ff4444;\">You do not have access to this Plex server.</p>';\n                    } else if (response.status !== 401) {\n                        // Some other error\n                        console.error('Auth check failed:', response.status);\n                    }\n                    // 401 means not authenticated yet, keep polling\n                })\n                .catch(error => {\n                    console.error('Error checking auth:', error);\n                });\n        }\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func logoutButton() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<a href=\"/logout\" class=\"logout\">Logout</a>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func userDetails(data LoginPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<h1>Welcome Back!</h1><p>You are already logged in as ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(data.Username)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/server/views/login.templ`, Line: 277, Col: 51}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, ".</p><div class=\"status\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.HasAccess {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<p class=\"status-ok\"><strong>Server Access:</strong> Granted ✓</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<p class=\"status-error\"><strong>Server Access:</strong> Denied ✗</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
